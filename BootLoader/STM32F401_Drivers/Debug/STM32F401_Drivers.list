
STM32F401_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001084  08008194  08008194  00008194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08009218  08009218  00009218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009228  08009228  00010040  2**0
                  CONTENTS
  4 .ARM          00000000  08009228  08009228  00010040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009228  08009228  00010040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009228  08009228  00009228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800922c  0800922c  0000922c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08009230  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000040  08009270  00010040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08009270  000100c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001006a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000283c  00000000  00000000  000100ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b97  00000000  00000000  000128e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000260  00000000  00000000  00013480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ac  00000000  00000000  000136e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000091c  00000000  00000000  0001388c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003fa4  00000000  00000000  000141a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007adc  00000000  00000000  0001814c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000744  00000000  00000000  0001fc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008194 <__do_global_dtors_aux>:
 8008194:	b510      	push	{r4, lr}
 8008196:	4c05      	ldr	r4, [pc, #20]	; (80081ac <__do_global_dtors_aux+0x18>)
 8008198:	7823      	ldrb	r3, [r4, #0]
 800819a:	b933      	cbnz	r3, 80081aa <__do_global_dtors_aux+0x16>
 800819c:	4b04      	ldr	r3, [pc, #16]	; (80081b0 <__do_global_dtors_aux+0x1c>)
 800819e:	b113      	cbz	r3, 80081a6 <__do_global_dtors_aux+0x12>
 80081a0:	4804      	ldr	r0, [pc, #16]	; (80081b4 <__do_global_dtors_aux+0x20>)
 80081a2:	f3af 8000 	nop.w
 80081a6:	2301      	movs	r3, #1
 80081a8:	7023      	strb	r3, [r4, #0]
 80081aa:	bd10      	pop	{r4, pc}
 80081ac:	20000040 	.word	0x20000040
 80081b0:	00000000 	.word	0x00000000
 80081b4:	08009200 	.word	0x08009200

080081b8 <frame_dummy>:
 80081b8:	b508      	push	{r3, lr}
 80081ba:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <frame_dummy+0x10>)
 80081bc:	b11b      	cbz	r3, 80081c6 <frame_dummy+0xe>
 80081be:	4903      	ldr	r1, [pc, #12]	; (80081cc <frame_dummy+0x14>)
 80081c0:	4803      	ldr	r0, [pc, #12]	; (80081d0 <frame_dummy+0x18>)
 80081c2:	f3af 8000 	nop.w
 80081c6:	bd08      	pop	{r3, pc}
 80081c8:	00000000 	.word	0x00000000
 80081cc:	20000044 	.word	0x20000044
 80081d0:	08009200 	.word	0x08009200

080081d4 <scb_set_priority_group>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t scb_set_priority_group(uint32_t priority_group)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK ;
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]
	if((GROUP_PRIORITIES_8_SUB_PRIORITIES_2==priority_group)||(GROUP_PRIORITIES_4_SUB_PRIORITIES_4==priority_group)||(GROUP_PRIORITIES_2_SUB_PRIORITIES_8==priority_group)||(GROUP_PRIORITIES_1_SUB_PRIORITIES_16==priority_group))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a0e      	ldr	r2, [pc, #56]	; (800821c <scb_set_priority_group+0x48>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00b      	beq.n	8008200 <scb_set_priority_group+0x2c>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a0d      	ldr	r2, [pc, #52]	; (8008220 <scb_set_priority_group+0x4c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d007      	beq.n	8008200 <scb_set_priority_group+0x2c>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a0c      	ldr	r2, [pc, #48]	; (8008224 <scb_set_priority_group+0x50>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d003      	beq.n	8008200 <scb_set_priority_group+0x2c>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a0b      	ldr	r2, [pc, #44]	; (8008228 <scb_set_priority_group+0x54>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d104      	bne.n	800820a <scb_set_priority_group+0x36>
	{
		SCB->AIRCR = priority_group;
 8008200:	4a0a      	ldr	r2, [pc, #40]	; (800822c <scb_set_priority_group+0x58>)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8c2 3d04 	str.w	r3, [r2, #3332]	; 0xd04
 8008208:	e001      	b.n	800820e <scb_set_priority_group+0x3a>
	}
	else
	{
		ret = RET_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 800820e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	bc80      	pop	{r7}
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	05fa0400 	.word	0x05fa0400
 8008220:	05fa0500 	.word	0x05fa0500
 8008224:	05fa0600 	.word	0x05fa0600
 8008228:	05fa0700 	.word	0x05fa0700
 800822c:	e000e008 	.word	0xe000e008

08008230 <Systick_init>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Systick_init(void)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
	uint32_t NO_Tick = 0x00ffffff;
 8008236:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800823a:	603b      	str	r3, [r7, #0]
	Std_RetType_t ret = RET_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	71fb      	strb	r3, [r7, #7]
	if(NO_Tick > (STSTICK_LOAD_VALUE_POS << STSTICK_LOAD_VALUE_ACCESS)) /*resolution = 2^n = 2^24 = 16,777,216 = 1<<24*/
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008246:	d902      	bls.n	800824e <Systick_init+0x1e>
	{
		ret = RET_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	71fb      	strb	r3, [r7, #7]
 800824c:	e011      	b.n	8008272 <Systick_init+0x42>
	}
	else
	{
		/*Disable the SYSTICK counter*/
		SYSTICK->CSR &=~ (SYSTICK_CSR_ENABLE_MASK << SYSTICK_CSR_ENABLE_POS);
 800824e:	4b0c      	ldr	r3, [pc, #48]	; (8008280 <Systick_init+0x50>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a0b      	ldr	r2, [pc, #44]	; (8008280 <Systick_init+0x50>)
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	6013      	str	r3, [r2, #0]
		/*load the value into SYST_CVR in the range 0x00000001-0x00FFFFFF*/
		SYSTICK->RVR = NO_Tick;
 800825a:	4a09      	ldr	r2, [pc, #36]	; (8008280 <Systick_init+0x50>)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	6053      	str	r3, [r2, #4]
		/*clear the SYSTICK counter value*/
		SYSTICK->CVR = 0;
 8008260:	4b07      	ldr	r3, [pc, #28]	; (8008280 <Systick_init+0x50>)
 8008262:	2200      	movs	r2, #0
 8008264:	609a      	str	r2, [r3, #8]
		/*Indicates the clock source: (0) = external clock , (1) = processor clock*/
#if SYSTICK_CLOCK_SOURCE==SYSTICK_CLOCK_SOURCE_DIV_1
		SYSTICK->CSR |= (SYSTICK_CSR_CLOCK_MASK<<SYSTICK_CSR_CLOCK_POS);
 8008266:	4b06      	ldr	r3, [pc, #24]	; (8008280 <Systick_init+0x50>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a05      	ldr	r2, [pc, #20]	; (8008280 <Systick_init+0x50>)
 800826c:	f043 0304 	orr.w	r3, r3, #4
 8008270:	6013      	str	r3, [r2, #0]
#elif SYSTICK_CLOCK_SOURCE==SYSTICK_CLOCK_SOURCE_DIV_8
		SYSTICK->CSR &=~(SYSTICK_CSR_CLOCK_MASK<<SYSTICK_CSR_CLOCK_POS);
#else
#endif
	}
	return ret;
 8008272:	79fb      	ldrb	r3, [r7, #7]
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	bc80      	pop	{r7}
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	e000e010 	.word	0xe000e010

08008284 <Systick_Wait_Blocking>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Systick_Wait_Blocking(uint32_t NO_Tick)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
	if(NO_Tick > (STSTICK_LOAD_VALUE_POS << STSTICK_LOAD_VALUE_ACCESS)) /*resolution = 2^n = 2^24 = 16,777,216 = 1<<24*/
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008296:	d902      	bls.n	800829e <Systick_Wait_Blocking+0x1a>
	{
		ret = RET_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
 800829c:	e012      	b.n	80082c4 <Systick_Wait_Blocking+0x40>
	}
	else
	{
		/*load the value into SYST_CVR in the range 0x00000001-0x00FFFFFF*/
		SYSTICK->RVR = NO_Tick;
 800829e:	4a0c      	ldr	r2, [pc, #48]	; (80082d0 <Systick_Wait_Blocking+0x4c>)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6053      	str	r3, [r2, #4]
		/*Enable the SYSTICK counter*/
		SYSTICK->CSR |= (SYSTICK_CSR_ENABLE_MASK << SYSTICK_CSR_ENABLE_POS);
 80082a4:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <Systick_Wait_Blocking+0x4c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <Systick_Wait_Blocking+0x4c>)
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	6013      	str	r3, [r2, #0]
		/*COUNTFLAG Returns 1 if timer counted to 0 since last time this was read*/
		while((SYSTICK->CSR &(SYSTICK_CSR_COUNTFLAG_MASK<<SYSTICK_CSR_COUNTFLAG_POS)) == 0);
 80082b0:	bf00      	nop
 80082b2:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <Systick_Wait_Blocking+0x4c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0f9      	beq.n	80082b2 <Systick_Wait_Blocking+0x2e>
		/*clear the SYSTICK counter value*/
		SYSTICK->CVR = 0;
 80082be:	4b04      	ldr	r3, [pc, #16]	; (80082d0 <Systick_Wait_Blocking+0x4c>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	609a      	str	r2, [r3, #8]
	}
	return ret;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr
 80082d0:	e000e010 	.word	0xe000e010

080082d4 <delay_ms>:
 * @param  : (ms) : number of Millie seconds
 * @return :
 *
 */
void delay_ms(uint32_t ms)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	if(ms > 0)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00c      	beq.n	80082fc <delay_ms+0x28>
	{
		uint32_t number_of_ms = ms;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60fb      	str	r3, [r7, #12]
		while(number_of_ms > 0)
 80082e6:	e006      	b.n	80082f6 <delay_ms+0x22>
		{
			Systick_Wait_Blocking(0x4189);	/*0x4189 = 1ms*/
 80082e8:	f244 1089 	movw	r0, #16777	; 0x4189
 80082ec:	f7ff ffca 	bl	8008284 <Systick_Wait_Blocking>
			number_of_ms--;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3b01      	subs	r3, #1
 80082f4:	60fb      	str	r3, [r7, #12]
		while(number_of_ms > 0)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f5      	bne.n	80082e8 <delay_ms+0x14>
		}
	}
}
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <DotMatrix_init>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t DotMatrix_init(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
	Std_RetType_t ret = RET_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i = 0 ; i < 8 ; i++)
 800830e:	2300      	movs	r3, #0
 8008310:	75bb      	strb	r3, [r7, #22]
 8008312:	e02c      	b.n	800836e <DotMatrix_init+0x6a>
	{
		PinConfig_t local1_pinConfig = { .Port = DotMatrix_Row_Port ,.Pin = row_pins_arr[i] ,.Mode = OUTPUT ,.Type=PUSH_PULL
 8008314:	f107 030c 	add.w	r3, r7, #12
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	f8c3 2003 	str.w	r2, [r3, #3]
 8008320:	2301      	movs	r3, #1
 8008322:	733b      	strb	r3, [r7, #12]
 8008324:	7dbb      	ldrb	r3, [r7, #22]
 8008326:	4a17      	ldr	r2, [pc, #92]	; (8008384 <DotMatrix_init+0x80>)
 8008328:	5cd3      	ldrb	r3, [r2, r3]
 800832a:	737b      	strb	r3, [r7, #13]
 800832c:	2301      	movs	r3, #1
 800832e:	73bb      	strb	r3, [r7, #14]
 8008330:	2301      	movs	r3, #1
 8008332:	73fb      	strb	r3, [r7, #15]
				, .Speed = MEDUIM , .PullType =NO_PULL
		};
		ret = GPIO_Pin_init(&local1_pinConfig);
 8008334:	f107 030c 	add.w	r3, r7, #12
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fb1d 	bl	8008978 <GPIO_Pin_init>
 800833e:	4603      	mov	r3, r0
 8008340:	75fb      	strb	r3, [r7, #23]


		PinConfig_t local2_pinConfig = { .Port = DotMatrix_Col_Port ,.Pin = col_pins_arr[i] ,.Mode = OUTPUT ,.Type=PUSH_PULL
 8008342:	1d3b      	adds	r3, r7, #4
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	f8c3 2003 	str.w	r2, [r3, #3]
 800834c:	7dbb      	ldrb	r3, [r7, #22]
 800834e:	4a0e      	ldr	r2, [pc, #56]	; (8008388 <DotMatrix_init+0x84>)
 8008350:	5cd3      	ldrb	r3, [r2, r3]
 8008352:	717b      	strb	r3, [r7, #5]
 8008354:	2301      	movs	r3, #1
 8008356:	71bb      	strb	r3, [r7, #6]
 8008358:	2301      	movs	r3, #1
 800835a:	71fb      	strb	r3, [r7, #7]
				, .Speed = MEDUIM , .PullType = NO_PULL };

		ret = GPIO_Pin_init(&local2_pinConfig);
 800835c:	1d3b      	adds	r3, r7, #4
 800835e:	4618      	mov	r0, r3
 8008360:	f000 fb0a 	bl	8008978 <GPIO_Pin_init>
 8008364:	4603      	mov	r3, r0
 8008366:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0 ; i < 8 ; i++)
 8008368:	7dbb      	ldrb	r3, [r7, #22]
 800836a:	3301      	adds	r3, #1
 800836c:	75bb      	strb	r3, [r7, #22]
 800836e:	7dbb      	ldrb	r3, [r7, #22]
 8008370:	2b07      	cmp	r3, #7
 8008372:	d9cf      	bls.n	8008314 <DotMatrix_init+0x10>
	}
	DotMatrix_TurnOff();
 8008374:	f000 f80a 	bl	800838c <DotMatrix_TurnOff>
	return ret;
 8008378:	7dfb      	ldrb	r3, [r7, #23]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	08009218 	.word	0x08009218
 8008388:	08009220 	.word	0x08009220

0800838c <DotMatrix_TurnOff>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t DotMatrix_TurnOff(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
	Std_RetType_t ret = RET_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0 ; i < 8 ; i++)
 8008396:	2300      	movs	r3, #0
 8008398:	71bb      	strb	r3, [r7, #6]
 800839a:	e016      	b.n	80083ca <DotMatrix_TurnOff+0x3e>
	{
		ret = GPIO_Set_Pin_Value(DotMatrix_Col_Port, col_pins_arr[i], PIN_LOW);
 800839c:	79bb      	ldrb	r3, [r7, #6]
 800839e:	4a0f      	ldr	r2, [pc, #60]	; (80083dc <DotMatrix_TurnOff+0x50>)
 80083a0:	5cd3      	ldrb	r3, [r2, r3]
 80083a2:	2200      	movs	r2, #0
 80083a4:	4619      	mov	r1, r3
 80083a6:	2000      	movs	r0, #0
 80083a8:	f000 fc04 	bl	8008bb4 <GPIO_Set_Pin_Value>
 80083ac:	4603      	mov	r3, r0
 80083ae:	71fb      	strb	r3, [r7, #7]
		ret = GPIO_Set_Pin_Value(DotMatrix_Row_Port, row_pins_arr[i], PIN_HIGH);
 80083b0:	79bb      	ldrb	r3, [r7, #6]
 80083b2:	4a0b      	ldr	r2, [pc, #44]	; (80083e0 <DotMatrix_TurnOff+0x54>)
 80083b4:	5cd3      	ldrb	r3, [r2, r3]
 80083b6:	2201      	movs	r2, #1
 80083b8:	4619      	mov	r1, r3
 80083ba:	2001      	movs	r0, #1
 80083bc:	f000 fbfa 	bl	8008bb4 <GPIO_Set_Pin_Value>
 80083c0:	4603      	mov	r3, r0
 80083c2:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0 ; i < 8 ; i++)
 80083c4:	79bb      	ldrb	r3, [r7, #6]
 80083c6:	3301      	adds	r3, #1
 80083c8:	71bb      	strb	r3, [r7, #6]
 80083ca:	79bb      	ldrb	r3, [r7, #6]
 80083cc:	2b07      	cmp	r3, #7
 80083ce:	d9e5      	bls.n	800839c <DotMatrix_TurnOff+0x10>
	}
	return ret ;
 80083d0:	79fb      	ldrb	r3, [r7, #7]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	08009220 	.word	0x08009220
 80083e0:	08009218 	.word	0x08009218

080083e4 <DotMatrix_Set_Led_Val>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t DotMatrix_Set_Led_Val(uint8_t row_number ,uint8_t col_number  , uint8_t value)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	71fb      	strb	r3, [r7, #7]
 80083ee:	460b      	mov	r3, r1
 80083f0:	71bb      	strb	r3, [r7, #6]
 80083f2:	4613      	mov	r3, r2
 80083f4:	717b      	strb	r3, [r7, #5]
	Std_RetType_t ret = RET_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73fb      	strb	r3, [r7, #15]

	switch(value)
 80083fa:	797b      	ldrb	r3, [r7, #5]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d018      	beq.n	8008432 <DotMatrix_Set_Led_Val+0x4e>
 8008400:	2b01      	cmp	r3, #1
 8008402:	d12d      	bne.n	8008460 <DotMatrix_Set_Led_Val+0x7c>
	{
	case DOT_MATRIX_LED_ON:
		  ret = GPIO_Set_Pin_Value(DotMatrix_Col_Port, col_pins_arr[col_number-1], PIN_HIGH);
 8008404:	79bb      	ldrb	r3, [r7, #6]
 8008406:	3b01      	subs	r3, #1
 8008408:	4a18      	ldr	r2, [pc, #96]	; (800846c <DotMatrix_Set_Led_Val+0x88>)
 800840a:	5cd3      	ldrb	r3, [r2, r3]
 800840c:	2201      	movs	r2, #1
 800840e:	4619      	mov	r1, r3
 8008410:	2000      	movs	r0, #0
 8008412:	f000 fbcf 	bl	8008bb4 <GPIO_Set_Pin_Value>
 8008416:	4603      	mov	r3, r0
 8008418:	73fb      	strb	r3, [r7, #15]
		  ret = GPIO_Set_Pin_Value(DotMatrix_Row_Port, row_pins_arr[row_number-1], PIN_LOW);
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	3b01      	subs	r3, #1
 800841e:	4a14      	ldr	r2, [pc, #80]	; (8008470 <DotMatrix_Set_Led_Val+0x8c>)
 8008420:	5cd3      	ldrb	r3, [r2, r3]
 8008422:	2200      	movs	r2, #0
 8008424:	4619      	mov	r1, r3
 8008426:	2001      	movs	r0, #1
 8008428:	f000 fbc4 	bl	8008bb4 <GPIO_Set_Pin_Value>
 800842c:	4603      	mov	r3, r0
 800842e:	73fb      	strb	r3, [r7, #15]
	break;
 8008430:	e016      	b.n	8008460 <DotMatrix_Set_Led_Val+0x7c>
	case DOT_MATRIX_LED_OFF:
		  ret = GPIO_Set_Pin_Value(DotMatrix_Col_Port, col_pins_arr[col_number-1], PIN_LOW);
 8008432:	79bb      	ldrb	r3, [r7, #6]
 8008434:	3b01      	subs	r3, #1
 8008436:	4a0d      	ldr	r2, [pc, #52]	; (800846c <DotMatrix_Set_Led_Val+0x88>)
 8008438:	5cd3      	ldrb	r3, [r2, r3]
 800843a:	2200      	movs	r2, #0
 800843c:	4619      	mov	r1, r3
 800843e:	2000      	movs	r0, #0
 8008440:	f000 fbb8 	bl	8008bb4 <GPIO_Set_Pin_Value>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]
		  ret = GPIO_Set_Pin_Value(DotMatrix_Row_Port, row_pins_arr[row_number-1], PIN_HIGH);
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	3b01      	subs	r3, #1
 800844c:	4a08      	ldr	r2, [pc, #32]	; (8008470 <DotMatrix_Set_Led_Val+0x8c>)
 800844e:	5cd3      	ldrb	r3, [r2, r3]
 8008450:	2201      	movs	r2, #1
 8008452:	4619      	mov	r1, r3
 8008454:	2001      	movs	r0, #1
 8008456:	f000 fbad 	bl	8008bb4 <GPIO_Set_Pin_Value>
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]
	break;
 800845e:	bf00      	nop
	}

	return ret;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	08009220 	.word	0x08009220
 8008470:	08009218 	.word	0x08009218

08008474 <EXTI_clear_pending_flag>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t EXTI_clear_pending_flag(EXTI_source_t EXTI_source)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	71fb      	strb	r3, [r7, #7]
	// clearing pending flag is done by programming the bit to '1'
	EXTI->PR |= (1 << EXTI_source);
 800847e:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <EXTI_clear_pending_flag+0x2c>)
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	79fa      	ldrb	r2, [r7, #7]
 8008484:	2101      	movs	r1, #1
 8008486:	fa01 f202 	lsl.w	r2, r1, r2
 800848a:	4611      	mov	r1, r2
 800848c:	4a04      	ldr	r2, [pc, #16]	; (80084a0 <EXTI_clear_pending_flag+0x2c>)
 800848e:	430b      	orrs	r3, r1
 8008490:	6153      	str	r3, [r2, #20]
	return RET_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	bc80      	pop	{r7}
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	40013c00 	.word	0x40013c00

080084a4 <EXTI_read_pending_flag>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t EXTI_read_pending_flag(EXTI_source_t EXTI_source, pending_flag_t* pending_flag)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	4603      	mov	r3, r0
 80084ac:	6039      	str	r1, [r7, #0]
 80084ae:	71fb      	strb	r3, [r7, #7]

	*pending_flag = EXTI->PR & (1 << EXTI_source) ? INT_TRIGGERED : INT_NOT_TRIGGERED;
 80084b0:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <EXTI_read_pending_flag+0x38>)
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	79fa      	ldrb	r2, [r7, #7]
 80084b6:	2101      	movs	r1, #1
 80084b8:	fa01 f202 	lsl.w	r2, r1, r2
 80084bc:	4013      	ands	r3, r2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bf14      	ite	ne
 80084c2:	2301      	movne	r3, #1
 80084c4:	2300      	moveq	r3, #0
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	461a      	mov	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	701a      	strb	r2, [r3, #0]
	return RET_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bc80      	pop	{r7}
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	40013c00 	.word	0x40013c00

080084e0 <EXTI0_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI0_IRQHandler(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 80084e4:	4b0a      	ldr	r3, [pc, #40]	; (8008510 <EXTI0_IRQHandler+0x30>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff ffc3 	bl	8008474 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 80084ee:	4b08      	ldr	r3, [pc, #32]	; (8008510 <EXTI0_IRQHandler+0x30>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	4b07      	ldr	r3, [pc, #28]	; (8008514 <EXTI0_IRQHandler+0x34>)
 80084f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d006      	beq.n	800850c <EXTI0_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 80084fe:	4b04      	ldr	r3, [pc, #16]	; (8008510 <EXTI0_IRQHandler+0x30>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	4b03      	ldr	r3, [pc, #12]	; (8008514 <EXTI0_IRQHandler+0x34>)
 8008506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850a:	4798      	blx	r3
	}
}
 800850c:	bf00      	nop
 800850e:	bd80      	pop	{r7, pc}
 8008510:	200000b8 	.word	0x200000b8
 8008514:	2000005c 	.word	0x2000005c

08008518 <EXTI1_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI1_IRQHandler(void)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 800851c:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <EXTI1_IRQHandler+0x30>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	4618      	mov	r0, r3
 8008522:	f7ff ffa7 	bl	8008474 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8008526:	4b08      	ldr	r3, [pc, #32]	; (8008548 <EXTI1_IRQHandler+0x30>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	4b07      	ldr	r3, [pc, #28]	; (800854c <EXTI1_IRQHandler+0x34>)
 800852e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d006      	beq.n	8008544 <EXTI1_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8008536:	4b04      	ldr	r3, [pc, #16]	; (8008548 <EXTI1_IRQHandler+0x30>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	4b03      	ldr	r3, [pc, #12]	; (800854c <EXTI1_IRQHandler+0x34>)
 800853e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008542:	4798      	blx	r3
	}
}
 8008544:	bf00      	nop
 8008546:	bd80      	pop	{r7, pc}
 8008548:	200000b8 	.word	0x200000b8
 800854c:	2000005c 	.word	0x2000005c

08008550 <EXTI2_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI2_IRQHandler(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8008554:	4b0a      	ldr	r3, [pc, #40]	; (8008580 <EXTI2_IRQHandler+0x30>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff ff8b 	bl	8008474 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 800855e:	4b08      	ldr	r3, [pc, #32]	; (8008580 <EXTI2_IRQHandler+0x30>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	4b07      	ldr	r3, [pc, #28]	; (8008584 <EXTI2_IRQHandler+0x34>)
 8008566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d006      	beq.n	800857c <EXTI2_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 800856e:	4b04      	ldr	r3, [pc, #16]	; (8008580 <EXTI2_IRQHandler+0x30>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	4b03      	ldr	r3, [pc, #12]	; (8008584 <EXTI2_IRQHandler+0x34>)
 8008576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857a:	4798      	blx	r3
	}
}
 800857c:	bf00      	nop
 800857e:	bd80      	pop	{r7, pc}
 8008580:	200000b8 	.word	0x200000b8
 8008584:	2000005c 	.word	0x2000005c

08008588 <EXTI3_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI3_IRQHandler(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 800858c:	4b0a      	ldr	r3, [pc, #40]	; (80085b8 <EXTI3_IRQHandler+0x30>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff ff6f 	bl	8008474 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8008596:	4b08      	ldr	r3, [pc, #32]	; (80085b8 <EXTI3_IRQHandler+0x30>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	4b07      	ldr	r3, [pc, #28]	; (80085bc <EXTI3_IRQHandler+0x34>)
 800859e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d006      	beq.n	80085b4 <EXTI3_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 80085a6:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <EXTI3_IRQHandler+0x30>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	4b03      	ldr	r3, [pc, #12]	; (80085bc <EXTI3_IRQHandler+0x34>)
 80085ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b2:	4798      	blx	r3
	}
}
 80085b4:	bf00      	nop
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	200000b8 	.word	0x200000b8
 80085bc:	2000005c 	.word	0x2000005c

080085c0 <EXTI4_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI4_IRQHandler(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 80085c4:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <EXTI4_IRQHandler+0x30>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff ff53 	bl	8008474 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 80085ce:	4b08      	ldr	r3, [pc, #32]	; (80085f0 <EXTI4_IRQHandler+0x30>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	4b07      	ldr	r3, [pc, #28]	; (80085f4 <EXTI4_IRQHandler+0x34>)
 80085d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d006      	beq.n	80085ec <EXTI4_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 80085de:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <EXTI4_IRQHandler+0x30>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <EXTI4_IRQHandler+0x34>)
 80085e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ea:	4798      	blx	r3
	}
}
 80085ec:	bf00      	nop
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	200000b8 	.word	0x200000b8
 80085f4:	2000005c 	.word	0x2000005c

080085f8 <EXTI9_5_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI9_5_IRQHandler(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
	pending_flag_t flag = INT_NOT_TRIGGERED;
 80085fe:	2300      	movs	r3, #0
 8008600:	71fb      	strb	r3, [r7, #7]
	EXTI_read_pending_flag(EXTI_5 , &flag);
 8008602:	1dfb      	adds	r3, r7, #7
 8008604:	4619      	mov	r1, r3
 8008606:	2005      	movs	r0, #5
 8008608:	f7ff ff4c 	bl	80084a4 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d113      	bne.n	800863a <EXTI9_5_IRQHandler+0x42>
	{
		EXTI_clear_pending_flag(EXTI_5);
 8008612:	2005      	movs	r0, #5
 8008614:	f7ff ff2e 	bl	8008474 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8008618:	4b42      	ldr	r3, [pc, #264]	; (8008724 <EXTI9_5_IRQHandler+0x12c>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	4b42      	ldr	r3, [pc, #264]	; (8008728 <EXTI9_5_IRQHandler+0x130>)
 8008620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d006      	beq.n	8008636 <EXTI9_5_IRQHandler+0x3e>
		{
			EXTI_Handler[EXTI_source]();
 8008628:	4b3e      	ldr	r3, [pc, #248]	; (8008724 <EXTI9_5_IRQHandler+0x12c>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	461a      	mov	r2, r3
 800862e:	4b3e      	ldr	r3, [pc, #248]	; (8008728 <EXTI9_5_IRQHandler+0x130>)
 8008630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008634:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8008636:	2300      	movs	r3, #0
 8008638:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_6 , &flag);
 800863a:	1dfb      	adds	r3, r7, #7
 800863c:	4619      	mov	r1, r3
 800863e:	2006      	movs	r0, #6
 8008640:	f7ff ff30 	bl	80084a4 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8008644:	79fb      	ldrb	r3, [r7, #7]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d113      	bne.n	8008672 <EXTI9_5_IRQHandler+0x7a>
	{
		EXTI_clear_pending_flag(EXTI_6);
 800864a:	2006      	movs	r0, #6
 800864c:	f7ff ff12 	bl	8008474 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8008650:	4b34      	ldr	r3, [pc, #208]	; (8008724 <EXTI9_5_IRQHandler+0x12c>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	461a      	mov	r2, r3
 8008656:	4b34      	ldr	r3, [pc, #208]	; (8008728 <EXTI9_5_IRQHandler+0x130>)
 8008658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d006      	beq.n	800866e <EXTI9_5_IRQHandler+0x76>
		{
			EXTI_Handler[EXTI_source]();
 8008660:	4b30      	ldr	r3, [pc, #192]	; (8008724 <EXTI9_5_IRQHandler+0x12c>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	4b30      	ldr	r3, [pc, #192]	; (8008728 <EXTI9_5_IRQHandler+0x130>)
 8008668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866c:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800866e:	2300      	movs	r3, #0
 8008670:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_7 , &flag);
 8008672:	1dfb      	adds	r3, r7, #7
 8008674:	4619      	mov	r1, r3
 8008676:	2007      	movs	r0, #7
 8008678:	f7ff ff14 	bl	80084a4 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 800867c:	79fb      	ldrb	r3, [r7, #7]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d113      	bne.n	80086aa <EXTI9_5_IRQHandler+0xb2>
	{
		EXTI_clear_pending_flag(EXTI_7);
 8008682:	2007      	movs	r0, #7
 8008684:	f7ff fef6 	bl	8008474 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8008688:	4b26      	ldr	r3, [pc, #152]	; (8008724 <EXTI9_5_IRQHandler+0x12c>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	4b26      	ldr	r3, [pc, #152]	; (8008728 <EXTI9_5_IRQHandler+0x130>)
 8008690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d006      	beq.n	80086a6 <EXTI9_5_IRQHandler+0xae>
		{
			EXTI_Handler[EXTI_source]();
 8008698:	4b22      	ldr	r3, [pc, #136]	; (8008724 <EXTI9_5_IRQHandler+0x12c>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	4b22      	ldr	r3, [pc, #136]	; (8008728 <EXTI9_5_IRQHandler+0x130>)
 80086a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a4:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 80086a6:	2300      	movs	r3, #0
 80086a8:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_8 , &flag);
 80086aa:	1dfb      	adds	r3, r7, #7
 80086ac:	4619      	mov	r1, r3
 80086ae:	2008      	movs	r0, #8
 80086b0:	f7ff fef8 	bl	80084a4 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d113      	bne.n	80086e2 <EXTI9_5_IRQHandler+0xea>
	{
		EXTI_clear_pending_flag(EXTI_8);
 80086ba:	2008      	movs	r0, #8
 80086bc:	f7ff feda 	bl	8008474 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80086c0:	4b18      	ldr	r3, [pc, #96]	; (8008724 <EXTI9_5_IRQHandler+0x12c>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	461a      	mov	r2, r3
 80086c6:	4b18      	ldr	r3, [pc, #96]	; (8008728 <EXTI9_5_IRQHandler+0x130>)
 80086c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d006      	beq.n	80086de <EXTI9_5_IRQHandler+0xe6>
		{
			EXTI_Handler[EXTI_source]();
 80086d0:	4b14      	ldr	r3, [pc, #80]	; (8008724 <EXTI9_5_IRQHandler+0x12c>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	4b14      	ldr	r3, [pc, #80]	; (8008728 <EXTI9_5_IRQHandler+0x130>)
 80086d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086dc:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 80086de:	2300      	movs	r3, #0
 80086e0:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_9 , &flag);
 80086e2:	1dfb      	adds	r3, r7, #7
 80086e4:	4619      	mov	r1, r3
 80086e6:	2009      	movs	r0, #9
 80086e8:	f7ff fedc 	bl	80084a4 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80086ec:	79fb      	ldrb	r3, [r7, #7]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d113      	bne.n	800871a <EXTI9_5_IRQHandler+0x122>
	{
		EXTI_clear_pending_flag(EXTI_9);
 80086f2:	2009      	movs	r0, #9
 80086f4:	f7ff febe 	bl	8008474 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80086f8:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <EXTI9_5_IRQHandler+0x12c>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	4b0a      	ldr	r3, [pc, #40]	; (8008728 <EXTI9_5_IRQHandler+0x130>)
 8008700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d006      	beq.n	8008716 <EXTI9_5_IRQHandler+0x11e>
		{
			EXTI_Handler[EXTI_source]();
 8008708:	4b06      	ldr	r3, [pc, #24]	; (8008724 <EXTI9_5_IRQHandler+0x12c>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	4b06      	ldr	r3, [pc, #24]	; (8008728 <EXTI9_5_IRQHandler+0x130>)
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8008716:	2300      	movs	r3, #0
 8008718:	71fb      	strb	r3, [r7, #7]
	}
}
 800871a:	bf00      	nop
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	200000b8 	.word	0x200000b8
 8008728:	2000005c 	.word	0x2000005c

0800872c <EXTI15_10_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI15_10_IRQHandler(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
	pending_flag_t flag = INT_NOT_TRIGGERED;
 8008732:	2300      	movs	r3, #0
 8008734:	71fb      	strb	r3, [r7, #7]
	EXTI_read_pending_flag(EXTI_10 , &flag);
 8008736:	1dfb      	adds	r3, r7, #7
 8008738:	4619      	mov	r1, r3
 800873a:	200a      	movs	r0, #10
 800873c:	f7ff feb2 	bl	80084a4 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d113      	bne.n	800876e <EXTI15_10_IRQHandler+0x42>
	{
		EXTI_clear_pending_flag(EXTI_10);
 8008746:	200a      	movs	r0, #10
 8008748:	f7ff fe94 	bl	8008474 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 800874c:	4b50      	ldr	r3, [pc, #320]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	4b50      	ldr	r3, [pc, #320]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 8008754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d006      	beq.n	800876a <EXTI15_10_IRQHandler+0x3e>
		{
			EXTI_Handler[EXTI_source]();
 800875c:	4b4c      	ldr	r3, [pc, #304]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	4b4c      	ldr	r3, [pc, #304]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 8008764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008768:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800876a:	2300      	movs	r3, #0
 800876c:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_11 , &flag);
 800876e:	1dfb      	adds	r3, r7, #7
 8008770:	4619      	mov	r1, r3
 8008772:	200b      	movs	r0, #11
 8008774:	f7ff fe96 	bl	80084a4 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d113      	bne.n	80087a6 <EXTI15_10_IRQHandler+0x7a>
	{
		EXTI_clear_pending_flag(EXTI_11);
 800877e:	200b      	movs	r0, #11
 8008780:	f7ff fe78 	bl	8008474 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8008784:	4b42      	ldr	r3, [pc, #264]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
 800878a:	4b42      	ldr	r3, [pc, #264]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 800878c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d006      	beq.n	80087a2 <EXTI15_10_IRQHandler+0x76>
		{
			EXTI_Handler[EXTI_source]();
 8008794:	4b3e      	ldr	r3, [pc, #248]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	4b3e      	ldr	r3, [pc, #248]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 80087a2:	2300      	movs	r3, #0
 80087a4:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_12 , &flag);
 80087a6:	1dfb      	adds	r3, r7, #7
 80087a8:	4619      	mov	r1, r3
 80087aa:	200c      	movs	r0, #12
 80087ac:	f7ff fe7a 	bl	80084a4 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d113      	bne.n	80087de <EXTI15_10_IRQHandler+0xb2>
	{
		EXTI_clear_pending_flag(EXTI_12);
 80087b6:	200c      	movs	r0, #12
 80087b8:	f7ff fe5c 	bl	8008474 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80087bc:	4b34      	ldr	r3, [pc, #208]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	4b34      	ldr	r3, [pc, #208]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 80087c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d006      	beq.n	80087da <EXTI15_10_IRQHandler+0xae>
		{
			EXTI_Handler[EXTI_source]();
 80087cc:	4b30      	ldr	r3, [pc, #192]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	461a      	mov	r2, r3
 80087d2:	4b30      	ldr	r3, [pc, #192]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 80087da:	2300      	movs	r3, #0
 80087dc:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_13 , &flag);
 80087de:	1dfb      	adds	r3, r7, #7
 80087e0:	4619      	mov	r1, r3
 80087e2:	200d      	movs	r0, #13
 80087e4:	f7ff fe5e 	bl	80084a4 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d113      	bne.n	8008816 <EXTI15_10_IRQHandler+0xea>
	{
		EXTI_clear_pending_flag(EXTI_13);
 80087ee:	200d      	movs	r0, #13
 80087f0:	f7ff fe40 	bl	8008474 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80087f4:	4b26      	ldr	r3, [pc, #152]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	4b26      	ldr	r3, [pc, #152]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 80087fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d006      	beq.n	8008812 <EXTI15_10_IRQHandler+0xe6>
		{
			EXTI_Handler[EXTI_source]();
 8008804:	4b22      	ldr	r3, [pc, #136]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	461a      	mov	r2, r3
 800880a:	4b22      	ldr	r3, [pc, #136]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 800880c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008810:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8008812:	2300      	movs	r3, #0
 8008814:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_14 , &flag);
 8008816:	1dfb      	adds	r3, r7, #7
 8008818:	4619      	mov	r1, r3
 800881a:	200e      	movs	r0, #14
 800881c:	f7ff fe42 	bl	80084a4 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d113      	bne.n	800884e <EXTI15_10_IRQHandler+0x122>
	{
		EXTI_clear_pending_flag(EXTI_14);
 8008826:	200e      	movs	r0, #14
 8008828:	f7ff fe24 	bl	8008474 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 800882c:	4b18      	ldr	r3, [pc, #96]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	4b18      	ldr	r3, [pc, #96]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 8008834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d006      	beq.n	800884a <EXTI15_10_IRQHandler+0x11e>
		{
			EXTI_Handler[EXTI_source]();
 800883c:	4b14      	ldr	r3, [pc, #80]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	4b14      	ldr	r3, [pc, #80]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 8008844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008848:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800884a:	2300      	movs	r3, #0
 800884c:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_15 , &flag);
 800884e:	1dfb      	adds	r3, r7, #7
 8008850:	4619      	mov	r1, r3
 8008852:	200f      	movs	r0, #15
 8008854:	f7ff fe26 	bl	80084a4 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8008858:	79fb      	ldrb	r3, [r7, #7]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d113      	bne.n	8008886 <EXTI15_10_IRQHandler+0x15a>
	{
		EXTI_clear_pending_flag(EXTI_15);
 800885e:	200f      	movs	r0, #15
 8008860:	f7ff fe08 	bl	8008474 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8008864:	4b0a      	ldr	r3, [pc, #40]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	461a      	mov	r2, r3
 800886a:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 800886c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d006      	beq.n	8008882 <EXTI15_10_IRQHandler+0x156>
		{
			EXTI_Handler[EXTI_source]();
 8008874:	4b06      	ldr	r3, [pc, #24]	; (8008890 <EXTI15_10_IRQHandler+0x164>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	4b06      	ldr	r3, [pc, #24]	; (8008894 <EXTI15_10_IRQHandler+0x168>)
 800887c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008880:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8008882:	2300      	movs	r3, #0
 8008884:	71fb      	strb	r3, [r7, #7]
	}
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	200000b8 	.word	0x200000b8
 8008894:	2000005c 	.word	0x2000005c

08008898 <EXTI16_PVD_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI16_PVD_IRQHandler(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 800889c:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <EXTI16_PVD_IRQHandler+0x30>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff fde7 	bl	8008474 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 80088a6:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <EXTI16_PVD_IRQHandler+0x30>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	4b07      	ldr	r3, [pc, #28]	; (80088cc <EXTI16_PVD_IRQHandler+0x34>)
 80088ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d006      	beq.n	80088c4 <EXTI16_PVD_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 80088b6:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <EXTI16_PVD_IRQHandler+0x30>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	4b03      	ldr	r3, [pc, #12]	; (80088cc <EXTI16_PVD_IRQHandler+0x34>)
 80088be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c2:	4798      	blx	r3
	}
}
 80088c4:	bf00      	nop
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	200000b8 	.word	0x200000b8
 80088cc:	2000005c 	.word	0x2000005c

080088d0 <EXTI17_RTC_Alarm_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI17_RTC_Alarm_IRQHandler(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 80088d4:	4b0a      	ldr	r3, [pc, #40]	; (8008900 <EXTI17_RTC_Alarm_IRQHandler+0x30>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	4618      	mov	r0, r3
 80088da:	f7ff fdcb 	bl	8008474 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 80088de:	4b08      	ldr	r3, [pc, #32]	; (8008900 <EXTI17_RTC_Alarm_IRQHandler+0x30>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	4b07      	ldr	r3, [pc, #28]	; (8008904 <EXTI17_RTC_Alarm_IRQHandler+0x34>)
 80088e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d006      	beq.n	80088fc <EXTI17_RTC_Alarm_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 80088ee:	4b04      	ldr	r3, [pc, #16]	; (8008900 <EXTI17_RTC_Alarm_IRQHandler+0x30>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	4b03      	ldr	r3, [pc, #12]	; (8008904 <EXTI17_RTC_Alarm_IRQHandler+0x34>)
 80088f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fa:	4798      	blx	r3
	}
}
 80088fc:	bf00      	nop
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	200000b8 	.word	0x200000b8
 8008904:	2000005c 	.word	0x2000005c

08008908 <EXTI18_OTG_FS_WKUP_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI18_OTG_FS_WKUP_IRQHandler(void)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 800890c:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <EXTI18_OTG_FS_WKUP_IRQHandler+0x30>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	4618      	mov	r0, r3
 8008912:	f7ff fdaf 	bl	8008474 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8008916:	4b08      	ldr	r3, [pc, #32]	; (8008938 <EXTI18_OTG_FS_WKUP_IRQHandler+0x30>)
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	4b07      	ldr	r3, [pc, #28]	; (800893c <EXTI18_OTG_FS_WKUP_IRQHandler+0x34>)
 800891e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d006      	beq.n	8008934 <EXTI18_OTG_FS_WKUP_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8008926:	4b04      	ldr	r3, [pc, #16]	; (8008938 <EXTI18_OTG_FS_WKUP_IRQHandler+0x30>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	4b03      	ldr	r3, [pc, #12]	; (800893c <EXTI18_OTG_FS_WKUP_IRQHandler+0x34>)
 800892e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008932:	4798      	blx	r3
	}
}
 8008934:	bf00      	nop
 8008936:	bd80      	pop	{r7, pc}
 8008938:	200000b8 	.word	0x200000b8
 800893c:	2000005c 	.word	0x2000005c

08008940 <EXTI22_RTC_WKUP_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI22_RTC_WKUP_IRQHandler(void)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8008944:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <EXTI22_RTC_WKUP_IRQHandler+0x30>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff fd93 	bl	8008474 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 800894e:	4b08      	ldr	r3, [pc, #32]	; (8008970 <EXTI22_RTC_WKUP_IRQHandler+0x30>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	4b07      	ldr	r3, [pc, #28]	; (8008974 <EXTI22_RTC_WKUP_IRQHandler+0x34>)
 8008956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d006      	beq.n	800896c <EXTI22_RTC_WKUP_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 800895e:	4b04      	ldr	r3, [pc, #16]	; (8008970 <EXTI22_RTC_WKUP_IRQHandler+0x30>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	4b03      	ldr	r3, [pc, #12]	; (8008974 <EXTI22_RTC_WKUP_IRQHandler+0x34>)
 8008966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896a:	4798      	blx	r3
	}
}
 800896c:	bf00      	nop
 800896e:	bd80      	pop	{r7, pc}
 8008970:	200000b8 	.word	0x200000b8
 8008974:	2000005c 	.word	0x2000005c

08008978 <GPIO_Pin_init>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t GPIO_Pin_init(const PinConfig_t *pinConfig)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]
	if(NULL == pinConfig)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d102      	bne.n	8008990 <GPIO_Pin_init+0x18>
	{
		ret = RET_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	73fb      	strb	r3, [r7, #15]
 800898e:	e108      	b.n	8008ba2 <GPIO_Pin_init+0x22a>
	}
	else
	{
		/*select gpio mode */
		/*clear the mode bits*/
		(GPIO_PORT[pinConfig->Port]->MODER) &=~(MODER_MASK << (pinConfig->Pin*MODER_PIN_ACCESS));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	4b86      	ldr	r3, [pc, #536]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	2103      	movs	r1, #3
 80089a6:	fa01 f303 	lsl.w	r3, r1, r3
 80089aa:	43db      	mvns	r3, r3
 80089ac:	4619      	mov	r1, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	4b7e      	ldr	r3, [pc, #504]	; (8008bb0 <GPIO_Pin_init+0x238>)
 80089b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089ba:	400a      	ands	r2, r1
 80089bc:	601a      	str	r2, [r3, #0]
		/*set the mode bits*/
		(GPIO_PORT[pinConfig->Port]->MODER) |= ((pinConfig->Mode)<<(pinConfig->Pin*MODER_PIN_ACCESS));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	4b7a      	ldr	r3, [pc, #488]	; (8008bb0 <GPIO_Pin_init+0x238>)
 80089c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	789b      	ldrb	r3, [r3, #2]
 80089d0:	4619      	mov	r1, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	785b      	ldrb	r3, [r3, #1]
 80089d6:	005b      	lsls	r3, r3, #1
 80089d8:	fa01 f303 	lsl.w	r3, r1, r3
 80089dc:	4619      	mov	r1, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	4618      	mov	r0, r3
 80089e4:	4b72      	ldr	r3, [pc, #456]	; (8008bb0 <GPIO_Pin_init+0x238>)
 80089e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	601a      	str	r2, [r3, #0]

		/*select gpio pull state */
		/*clear the PUPDR bits*/
		(GPIO_PORT[pinConfig->Port]->PUPDR) &=~(PUPDR_MASK << (pinConfig->Pin)*PUPDR_PIN_ACCESS);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	4b6e      	ldr	r3, [pc, #440]	; (8008bb0 <GPIO_Pin_init+0x238>)
 80089f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fa:	68da      	ldr	r2, [r3, #12]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	785b      	ldrb	r3, [r3, #1]
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	2103      	movs	r1, #3
 8008a04:	fa01 f303 	lsl.w	r3, r1, r3
 8008a08:	43db      	mvns	r3, r3
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	4b67      	ldr	r3, [pc, #412]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008a14:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008a18:	400a      	ands	r2, r1
 8008a1a:	60da      	str	r2, [r3, #12]
		/*set the PUPDR bits*/
		(GPIO_PORT[pinConfig->Port]->PUPDR) |= ((pinConfig->PullType)<<(pinConfig->Pin*PUPDR_PIN_ACCESS));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	461a      	mov	r2, r3
 8008a22:	4b63      	ldr	r3, [pc, #396]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a28:	68da      	ldr	r2, [r3, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	795b      	ldrb	r3, [r3, #5]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	4618      	mov	r0, r3
 8008a42:	4b5b      	ldr	r3, [pc, #364]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008a44:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	60da      	str	r2, [r3, #12]

		/*select output type & output speed in case of output or alternate function*/
		if(OUTPUT ==pinConfig->Mode || ALTERNATE_FUNCTION ==pinConfig->Mode)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	789b      	ldrb	r3, [r3, #2]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d004      	beq.n	8008a5e <GPIO_Pin_init+0xe6>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	789b      	ldrb	r3, [r3, #2]
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	f040 80a2 	bne.w	8008ba2 <GPIO_Pin_init+0x22a>
		{
			/*select output type {push pull , open drain}*/
			/*clear the OTYPER bit*/
			(GPIO_PORT[pinConfig->Port]->OTYPER) &=~ (OTYPER_MASK<< pinConfig->Pin);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	4b52      	ldr	r3, [pc, #328]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	4619      	mov	r1, r3
 8008a72:	2301      	movs	r3, #1
 8008a74:	408b      	lsls	r3, r1
 8008a76:	43db      	mvns	r3, r3
 8008a78:	4619      	mov	r1, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	4b4b      	ldr	r3, [pc, #300]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008a82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008a86:	400a      	ands	r2, r1
 8008a88:	605a      	str	r2, [r3, #4]
			/*set the OTYPER bit*/
			(GPIO_PORT[pinConfig->Port]->OTYPER) |= ((pinConfig->Type)<<(pinConfig->Pin));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	4b47      	ldr	r3, [pc, #284]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	791b      	ldrb	r3, [r3, #4]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	785b      	ldrb	r3, [r3, #1]
 8008aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	4618      	mov	r0, r3
 8008aae:	4b40      	ldr	r3, [pc, #256]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008ab0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	605a      	str	r2, [r3, #4]

			/*select output speed {low , medium , high , very high}*/
			/*clear the OSPEEDR bits*/
			(GPIO_PORT[pinConfig->Port]->OSPEEDR) &=~(PSPEEDR_MASK << (pinConfig->Pin*PSPEEDR_PIN_ACCESS));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	4b3c      	ldr	r3, [pc, #240]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	785b      	ldrb	r3, [r3, #1]
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	2103      	movs	r1, #3
 8008ace:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	4618      	mov	r0, r3
 8008adc:	4b34      	ldr	r3, [pc, #208]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008ade:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ae2:	400a      	ands	r2, r1
 8008ae4:	609a      	str	r2, [r3, #8]
			/*set the OSPEEDR bits*/
			(GPIO_PORT[pinConfig->Port]->OSPEEDR) |= ((pinConfig->Speed) <<(pinConfig->Pin*PSPEEDR_PIN_ACCESS));
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	4b30      	ldr	r3, [pc, #192]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	78db      	ldrb	r3, [r3, #3]
 8008af8:	4619      	mov	r1, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	005b      	lsls	r3, r3, #1
 8008b00:	fa01 f303 	lsl.w	r3, r1, r3
 8008b04:	4619      	mov	r1, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	4b28      	ldr	r3, [pc, #160]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008b0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	609a      	str	r2, [r3, #8]

			if(ALTERNATE_FUNCTION == pinConfig->Mode)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	789b      	ldrb	r3, [r3, #2]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d141      	bne.n	8008ba2 <GPIO_Pin_init+0x22a>
			{
				/*select the pin alternate function*/
				uint8_t l_reg_num = pinConfig->Pin / AFR_PIN_SHIFTING;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	785b      	ldrb	r3, [r3, #1]
 8008b22:	08db      	lsrs	r3, r3, #3
 8008b24:	73bb      	strb	r3, [r7, #14]
				uint8_t l_bit_num = pinConfig->Pin % AFR_PIN_SHIFTING;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	737b      	strb	r3, [r7, #13]
				/*clear the AFR bits*/
				(GPIO_PORT[pinConfig->Port]->AFR[l_reg_num]) &=~(AFR_MASK << (l_bit_num *AFR_PIN_ACCESS));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	461a      	mov	r2, r3
 8008b36:	4b1e      	ldr	r3, [pc, #120]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3c:	7bba      	ldrb	r2, [r7, #14]
 8008b3e:	3208      	adds	r2, #8
 8008b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b44:	7b7b      	ldrb	r3, [r7, #13]
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	220f      	movs	r2, #15
 8008b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4e:	43db      	mvns	r3, r3
 8008b50:	4618      	mov	r0, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	4b15      	ldr	r3, [pc, #84]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5e:	7bba      	ldrb	r2, [r7, #14]
 8008b60:	4001      	ands	r1, r0
 8008b62:	3208      	adds	r2, #8
 8008b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				/*set the AFR bits*/
				(GPIO_PORT[pinConfig->Port]->AFR[l_reg_num]) |= ((pinConfig->AltFunc) << (l_bit_num *AFR_PIN_ACCESS));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4b10      	ldr	r3, [pc, #64]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b74:	7bba      	ldrb	r2, [r7, #14]
 8008b76:	3208      	adds	r2, #8
 8008b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	799b      	ldrb	r3, [r3, #6]
 8008b80:	461a      	mov	r2, r3
 8008b82:	7b7b      	ldrb	r3, [r7, #13]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	461a      	mov	r2, r3
 8008b92:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <GPIO_Pin_init+0x238>)
 8008b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b98:	7bba      	ldrb	r2, [r7, #14]
 8008b9a:	4301      	orrs	r1, r0
 8008b9c:	3208      	adds	r2, #8
 8008b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
		}
	}
	return ret;
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bc80      	pop	{r7}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20000000 	.word	0x20000000

08008bb4 <GPIO_Set_Pin_Value>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t GPIO_Set_Pin_Value(Port_t port , Pin_t pinNum,PinValue_t pinVal)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	71fb      	strb	r3, [r7, #7]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	71bb      	strb	r3, [r7, #6]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	717b      	strb	r3, [r7, #5]
	Std_RetType_t ret = RET_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
	if((PORTH < port)|(PIN15 < pinNum))
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	2b05      	cmp	r3, #5
 8008bce:	bf8c      	ite	hi
 8008bd0:	2301      	movhi	r3, #1
 8008bd2:	2300      	movls	r3, #0
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	79bb      	ldrb	r3, [r7, #6]
 8008bd8:	2b0f      	cmp	r3, #15
 8008bda:	bf8c      	ite	hi
 8008bdc:	2301      	movhi	r3, #1
 8008bde:	2300      	movls	r3, #0
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	4313      	orrs	r3, r2
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <GPIO_Set_Pin_Value+0x3c>
	{
		ret = RET_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	73fb      	strb	r3, [r7, #15]
 8008bee:	e027      	b.n	8008c40 <GPIO_Set_Pin_Value+0x8c>
	}
	else
	{
		if(PIN_LOW == pinVal)
 8008bf0:	797b      	ldrb	r3, [r7, #5]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d111      	bne.n	8008c1a <GPIO_Set_Pin_Value+0x66>
		{
			GPIO_PORT[port]->ODR &=~ (1<< pinNum);
 8008bf6:	79fb      	ldrb	r3, [r7, #7]
 8008bf8:	4a14      	ldr	r2, [pc, #80]	; (8008c4c <GPIO_Set_Pin_Value+0x98>)
 8008bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bfe:	695a      	ldr	r2, [r3, #20]
 8008c00:	79bb      	ldrb	r3, [r7, #6]
 8008c02:	2101      	movs	r1, #1
 8008c04:	fa01 f303 	lsl.w	r3, r1, r3
 8008c08:	43db      	mvns	r3, r3
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	490f      	ldr	r1, [pc, #60]	; (8008c4c <GPIO_Set_Pin_Value+0x98>)
 8008c10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c14:	4002      	ands	r2, r0
 8008c16:	615a      	str	r2, [r3, #20]
 8008c18:	e012      	b.n	8008c40 <GPIO_Set_Pin_Value+0x8c>
			/*GPIO_PORT[port]->BSRR = 1<< (pin +16);  faster*/
		}
		else if(PIN_HIGH == pinVal)
 8008c1a:	797b      	ldrb	r3, [r7, #5]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d10f      	bne.n	8008c40 <GPIO_Set_Pin_Value+0x8c>
		{
			GPIO_PORT[port]->ODR |= (1<< pinNum);
 8008c20:	79fb      	ldrb	r3, [r7, #7]
 8008c22:	4a0a      	ldr	r2, [pc, #40]	; (8008c4c <GPIO_Set_Pin_Value+0x98>)
 8008c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c28:	695a      	ldr	r2, [r3, #20]
 8008c2a:	79bb      	ldrb	r3, [r7, #6]
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c32:	4618      	mov	r0, r3
 8008c34:	79fb      	ldrb	r3, [r7, #7]
 8008c36:	4905      	ldr	r1, [pc, #20]	; (8008c4c <GPIO_Set_Pin_Value+0x98>)
 8008c38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c3c:	4302      	orrs	r2, r0
 8008c3e:	615a      	str	r2, [r3, #20]
			/*GPIO_PORT[port]->BSRR = (1<<pin);  faster*/
		}
	}
	return ret;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bc80      	pop	{r7}
 8008c4a:	4770      	bx	lr
 8008c4c:	20000000 	.word	0x20000000

08008c50 <GPIO_Toggle_Pin_Value>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t GPIO_Toggle_Pin_Value(Port_t port , Pin_t pinNum)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	460a      	mov	r2, r1
 8008c5a:	71fb      	strb	r3, [r7, #7]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	71bb      	strb	r3, [r7, #6]
	Std_RetType_t ret = RET_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
	if((PORTH < port)|(PIN15 < pinNum))
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	2b05      	cmp	r3, #5
 8008c68:	bf8c      	ite	hi
 8008c6a:	2301      	movhi	r3, #1
 8008c6c:	2300      	movls	r3, #0
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	79bb      	ldrb	r3, [r7, #6]
 8008c72:	2b0f      	cmp	r3, #15
 8008c74:	bf8c      	ite	hi
 8008c76:	2301      	movhi	r3, #1
 8008c78:	2300      	movls	r3, #0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <GPIO_Toggle_Pin_Value+0x3a>
	{
		ret = RET_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	73fb      	strb	r3, [r7, #15]
 8008c88:	e00f      	b.n	8008caa <GPIO_Toggle_Pin_Value+0x5a>
	}
	else
	{
		GPIO_PORT[port]->ODR ^= (1<< pinNum);
 8008c8a:	79fb      	ldrb	r3, [r7, #7]
 8008c8c:	4a0a      	ldr	r2, [pc, #40]	; (8008cb8 <GPIO_Toggle_Pin_Value+0x68>)
 8008c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c92:	695a      	ldr	r2, [r3, #20]
 8008c94:	79bb      	ldrb	r3, [r7, #6]
 8008c96:	2101      	movs	r1, #1
 8008c98:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	79fb      	ldrb	r3, [r7, #7]
 8008ca0:	4905      	ldr	r1, [pc, #20]	; (8008cb8 <GPIO_Toggle_Pin_Value+0x68>)
 8008ca2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008ca6:	4042      	eors	r2, r0
 8008ca8:	615a      	str	r2, [r3, #20]
		/*GPIO_PORT[port]->BSRR = 1<< (pin +16);  faster*/
	}
	return ret;
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bc80      	pop	{r7}
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	20000000 	.word	0x20000000

08008cbc <HALL_RCC_OscConfig>:


#include "../../../Inc/MCAL/RCC/RCC.h"

Std_RetType_t HALL_RCC_OscConfig(RCC_OscInitTypedef *RCC_OscInitStruct)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73fb      	strb	r3, [r7, #15]
	if(NULL == RCC_OscInitStruct)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d102      	bne.n	8008cd4 <HALL_RCC_OscConfig+0x18>
	{
		ret = RET_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	73fb      	strb	r3, [r7, #15]
 8008cd2:	e04a      	b.n	8008d6a <HALL_RCC_OscConfig+0xae>
	}
	else
	{
		if(RCC_OSCILLATORTYPE_HSE == RCC_OscInitStruct->OscillatorType)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d11d      	bne.n	8008d18 <HALL_RCC_OscConfig+0x5c>
		{
			if(RCC_HSE_ON == RCC_OscInitStruct->HSE_State)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d112      	bne.n	8008d0a <HALL_RCC_OscConfig+0x4e>
			{
				/*HSE oscillator selected as system clock*/
				SET_BIT(RCC->CFGR , RCC_CFGR_SW0_POS);
 8008ce4:	4b24      	ldr	r3, [pc, #144]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	4a23      	ldr	r2, [pc, #140]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008cea:	f043 0301 	orr.w	r3, r3, #1
 8008cee:	6093      	str	r3, [r2, #8]
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW1_POS);
 8008cf0:	4b21      	ldr	r3, [pc, #132]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	4a20      	ldr	r2, [pc, #128]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008cf6:	f023 0302 	bic.w	r3, r3, #2
 8008cfa:	6093      	str	r3, [r2, #8]
				/*HSE oscillator ON*/
				SET_BIT(RCC->CR,RCC_CR_HSEON_POS);
 8008cfc:	4b1e      	ldr	r3, [pc, #120]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a1d      	ldr	r2, [pc, #116]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	e02f      	b.n	8008d6a <HALL_RCC_OscConfig+0xae>
			}
			else
			{
				CLEAR_BIT(RCC->CR,RCC_CR_HSEON_POS);
 8008d0a:	4b1b      	ldr	r3, [pc, #108]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a1a      	ldr	r2, [pc, #104]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	e028      	b.n	8008d6a <HALL_RCC_OscConfig+0xae>
			}
		}
		else if(RCC_OSCILLATORTYPE_HSI == RCC_OscInitStruct->OscillatorType)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d11d      	bne.n	8008d5c <HALL_RCC_OscConfig+0xa0>
		{
			if(RCC_HSI_ON == RCC_OscInitStruct->HSI_State)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d112      	bne.n	8008d4e <HALL_RCC_OscConfig+0x92>
			{
				/*HSI oscillator selected as system clock*/
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW0_POS);
 8008d28:	4b13      	ldr	r3, [pc, #76]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	4a12      	ldr	r2, [pc, #72]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008d2e:	f023 0301 	bic.w	r3, r3, #1
 8008d32:	6093      	str	r3, [r2, #8]
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW1_POS);
 8008d34:	4b10      	ldr	r3, [pc, #64]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	4a0f      	ldr	r2, [pc, #60]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008d3a:	f023 0302 	bic.w	r3, r3, #2
 8008d3e:	6093      	str	r3, [r2, #8]
				/*HSI oscillator ON*/
				SET_BIT(RCC->CR,RCC_CR_HSION_POS);
 8008d40:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a0c      	ldr	r2, [pc, #48]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008d46:	f043 0301 	orr.w	r3, r3, #1
 8008d4a:	6013      	str	r3, [r2, #0]
 8008d4c:	e00d      	b.n	8008d6a <HALL_RCC_OscConfig+0xae>
			}
			else
			{
				CLEAR_BIT(RCC->CR,RCC_CR_HSION_POS);
 8008d4e:	4b0a      	ldr	r3, [pc, #40]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a09      	ldr	r2, [pc, #36]	; (8008d78 <HALL_RCC_OscConfig+0xbc>)
 8008d54:	f023 0301 	bic.w	r3, r3, #1
 8008d58:	6013      	str	r3, [r2, #0]
 8008d5a:	e006      	b.n	8008d6a <HALL_RCC_OscConfig+0xae>
			}
		}
		else if(RCC_OSCILLATORTYPE_LSE == RCC_OscInitStruct->OscillatorType)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d002      	beq.n	8008d6a <HALL_RCC_OscConfig+0xae>
			else
			{

			}
		}
		else if(RCC_OSCILLATORTYPE_LSI == RCC_OscInitStruct->OscillatorType)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b08      	cmp	r3, #8
		else
		{
			/*Nothing*/
		}
	}
	return ret;
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bc80      	pop	{r7}
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	40023800 	.word	0x40023800

08008d7c <HALL_RCC_ClockConfig>:

Std_RetType_t HALL_RCC_ClockConfig(RCC_ClkInitTypedef *RCC_ClockInitStruct)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]
	if(NULL == RCC_ClockInitStruct)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <HALL_RCC_ClockConfig+0x18>
	{
		ret = RET_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]
 8008d92:	e01a      	b.n	8008dca <HALL_RCC_ClockConfig+0x4e>
	}
	else
	{
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_HPRE_POS, RCC_ClockInitStruct->AHBClkDivider);
 8008d94:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <HALL_RCC_ClockConfig+0x5c>)
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f023 0204 	bic.w	r2, r3, #4
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	490d      	ldr	r1, [pc, #52]	; (8008dd8 <HALL_RCC_ClockConfig+0x5c>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	608b      	str	r3, [r1, #8]
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_PPRE1_POS, RCC_ClockInitStruct->APB1ClkDivider);
 8008da6:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <HALL_RCC_ClockConfig+0x5c>)
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f023 020a 	bic.w	r2, r3, #10
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	4909      	ldr	r1, [pc, #36]	; (8008dd8 <HALL_RCC_ClockConfig+0x5c>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	608b      	str	r3, [r1, #8]
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_PPRE2_POS, RCC_ClockInitStruct->APB2ClkDivider);
 8008db8:	4b07      	ldr	r3, [pc, #28]	; (8008dd8 <HALL_RCC_ClockConfig+0x5c>)
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f023 020d 	bic.w	r2, r3, #13
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	4904      	ldr	r1, [pc, #16]	; (8008dd8 <HALL_RCC_ClockConfig+0x5c>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	608b      	str	r3, [r1, #8]
	}
	return ret;
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40023800 	.word	0x40023800

08008ddc <USART2_IRQHandler>:
 * @brief  : The ISR of USART2
 * @param  : void
 * @return : void
 */
void USART2_IRQHandler(void)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
	if (USART_Array[USART_source]->USART_SR & USART_RX_FLAG_BIT_POS)
 8008de0:	4b2c      	ldr	r3, [pc, #176]	; (8008e94 <USART2_IRQHandler+0xb8>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	461a      	mov	r2, r3
 8008de6:	4b2c      	ldr	r3, [pc, #176]	; (8008e98 <USART2_IRQHandler+0xbc>)
 8008de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d01c      	beq.n	8008e30 <USART2_IRQHandler+0x54>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_RX_FLAG_BIT_POS;
 8008df6:	4b27      	ldr	r3, [pc, #156]	; (8008e94 <USART2_IRQHandler+0xb8>)
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	4b26      	ldr	r3, [pc, #152]	; (8008e98 <USART2_IRQHandler+0xbc>)
 8008dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	4b23      	ldr	r3, [pc, #140]	; (8008e94 <USART2_IRQHandler+0xb8>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4b23      	ldr	r3, [pc, #140]	; (8008e98 <USART2_IRQHandler+0xbc>)
 8008e0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e10:	f022 0220 	bic.w	r2, r2, #32
 8008e14:	601a      	str	r2, [r3, #0]
		// Read the received data
		rx_buffer = (uint8_t)(USART_Array[USART_source]->USART_DR & 0xFF);
 8008e16:	4b1f      	ldr	r3, [pc, #124]	; (8008e94 <USART2_IRQHandler+0xb8>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	4b1e      	ldr	r3, [pc, #120]	; (8008e98 <USART2_IRQHandler+0xbc>)
 8008e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	4b1d      	ldr	r3, [pc, #116]	; (8008e9c <USART2_IRQHandler+0xc0>)
 8008e28:	701a      	strb	r2, [r3, #0]
		rx_ready = 1;  // Indicate that a byte has been received
 8008e2a:	4b1d      	ldr	r3, [pc, #116]	; (8008ea0 <USART2_IRQHandler+0xc4>)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	701a      	strb	r2, [r3, #0]
	}

	// Check if the TXE flag is set
	if (USART_Array[USART_source]->USART_SR & USART_TX_FLAG_BIT_POS)
 8008e30:	4b18      	ldr	r3, [pc, #96]	; (8008e94 <USART2_IRQHandler+0xb8>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	4b18      	ldr	r3, [pc, #96]	; (8008e98 <USART2_IRQHandler+0xbc>)
 8008e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d021      	beq.n	8008e8a <USART2_IRQHandler+0xae>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_TX_FLAG_BIT_POS;
 8008e46:	4b13      	ldr	r3, [pc, #76]	; (8008e94 <USART2_IRQHandler+0xb8>)
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	4b12      	ldr	r3, [pc, #72]	; (8008e98 <USART2_IRQHandler+0xbc>)
 8008e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	4b0f      	ldr	r3, [pc, #60]	; (8008e94 <USART2_IRQHandler+0xb8>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4b0f      	ldr	r3, [pc, #60]	; (8008e98 <USART2_IRQHandler+0xbc>)
 8008e5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e64:	601a      	str	r2, [r3, #0]
		// If there is data to transmit
		if (!tx_ready) {
 8008e66:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <USART2_IRQHandler+0xc8>)
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10c      	bne.n	8008e8a <USART2_IRQHandler+0xae>
			USART_Array[USART_source]->USART_DR = tx_buffer;  // Send the byte
 8008e70:	4b0d      	ldr	r3, [pc, #52]	; (8008ea8 <USART2_IRQHandler+0xcc>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	4b07      	ldr	r3, [pc, #28]	; (8008e94 <USART2_IRQHandler+0xb8>)
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <USART2_IRQHandler+0xbc>)
 8008e7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e82:	605a      	str	r2, [r3, #4]
			tx_ready = 1;  // Indicate that the transmission is complete
 8008e84:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <USART2_IRQHandler+0xc8>)
 8008e86:	2201      	movs	r2, #1
 8008e88:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8008e8a:	bf00      	nop
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bc80      	pop	{r7}
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	200000b9 	.word	0x200000b9
 8008e98:	20000018 	.word	0x20000018
 8008e9c:	200000bb 	.word	0x200000bb
 8008ea0:	200000bc 	.word	0x200000bc
 8008ea4:	20000024 	.word	0x20000024
 8008ea8:	200000ba 	.word	0x200000ba

08008eac <USART1_IRQHandler>:
 * @brief  : The ISR of USART2
 * @param  : void
 * @return : void
 */
void USART1_IRQHandler(void)
{
 8008eac:	b480      	push	{r7}
 8008eae:	af00      	add	r7, sp, #0
	if (USART_Array[USART_source]->USART_SR & USART_RX_FLAG_BIT_POS)
 8008eb0:	4b2c      	ldr	r3, [pc, #176]	; (8008f64 <USART1_IRQHandler+0xb8>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4b2c      	ldr	r3, [pc, #176]	; (8008f68 <USART1_IRQHandler+0xbc>)
 8008eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0320 	and.w	r3, r3, #32
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01c      	beq.n	8008f00 <USART1_IRQHandler+0x54>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_RX_FLAG_BIT_POS;
 8008ec6:	4b27      	ldr	r3, [pc, #156]	; (8008f64 <USART1_IRQHandler+0xb8>)
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4b26      	ldr	r3, [pc, #152]	; (8008f68 <USART1_IRQHandler+0xbc>)
 8008ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	4b23      	ldr	r3, [pc, #140]	; (8008f64 <USART1_IRQHandler+0xb8>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4b23      	ldr	r3, [pc, #140]	; (8008f68 <USART1_IRQHandler+0xbc>)
 8008edc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ee0:	f022 0220 	bic.w	r2, r2, #32
 8008ee4:	601a      	str	r2, [r3, #0]
		// Read the received data
		rx_buffer = (uint8_t)(USART_Array[USART_source]->USART_DR & 0xFF);
 8008ee6:	4b1f      	ldr	r3, [pc, #124]	; (8008f64 <USART1_IRQHandler+0xb8>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	4b1e      	ldr	r3, [pc, #120]	; (8008f68 <USART1_IRQHandler+0xbc>)
 8008eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	4b1d      	ldr	r3, [pc, #116]	; (8008f6c <USART1_IRQHandler+0xc0>)
 8008ef8:	701a      	strb	r2, [r3, #0]
		rx_ready = 1;  // Indicate that a byte has been received
 8008efa:	4b1d      	ldr	r3, [pc, #116]	; (8008f70 <USART1_IRQHandler+0xc4>)
 8008efc:	2201      	movs	r2, #1
 8008efe:	701a      	strb	r2, [r3, #0]
	}

	// Check if the TXE flag is set
	if (USART_Array[USART_source]->USART_SR & USART_TX_FLAG_BIT_POS)
 8008f00:	4b18      	ldr	r3, [pc, #96]	; (8008f64 <USART1_IRQHandler+0xb8>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	4b18      	ldr	r3, [pc, #96]	; (8008f68 <USART1_IRQHandler+0xbc>)
 8008f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d021      	beq.n	8008f5a <USART1_IRQHandler+0xae>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_TX_FLAG_BIT_POS;
 8008f16:	4b13      	ldr	r3, [pc, #76]	; (8008f64 <USART1_IRQHandler+0xb8>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	4b12      	ldr	r3, [pc, #72]	; (8008f68 <USART1_IRQHandler+0xbc>)
 8008f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	4b0f      	ldr	r3, [pc, #60]	; (8008f64 <USART1_IRQHandler+0xb8>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <USART1_IRQHandler+0xbc>)
 8008f2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f34:	601a      	str	r2, [r3, #0]
		// If there is data to transmit
		if (!tx_ready) {
 8008f36:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <USART1_IRQHandler+0xc8>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10c      	bne.n	8008f5a <USART1_IRQHandler+0xae>
			USART_Array[USART_source]->USART_DR = tx_buffer;  // Send the byte
 8008f40:	4b0d      	ldr	r3, [pc, #52]	; (8008f78 <USART1_IRQHandler+0xcc>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <USART1_IRQHandler+0xb8>)
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <USART1_IRQHandler+0xbc>)
 8008f4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f52:	605a      	str	r2, [r3, #4]
			tx_ready = 1;  // Indicate that the transmission is complete
 8008f54:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <USART1_IRQHandler+0xc8>)
 8008f56:	2201      	movs	r2, #1
 8008f58:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8008f5a:	bf00      	nop
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	200000b9 	.word	0x200000b9
 8008f68:	20000018 	.word	0x20000018
 8008f6c:	200000bb 	.word	0x200000bb
 8008f70:	200000bc 	.word	0x200000bc
 8008f74:	20000024 	.word	0x20000024
 8008f78:	200000ba 	.word	0x200000ba

08008f7c <USART6_IRQHandler>:
 * @brief  : The ISR of USART2
 * @param  : void
 * @return : void
 */
void USART6_IRQHandler(void)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	af00      	add	r7, sp, #0
	if (USART_Array[USART_source]->USART_SR & USART_RX_FLAG_BIT_POS)
 8008f80:	4b2c      	ldr	r3, [pc, #176]	; (8009034 <USART6_IRQHandler+0xb8>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	4b2c      	ldr	r3, [pc, #176]	; (8009038 <USART6_IRQHandler+0xbc>)
 8008f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0320 	and.w	r3, r3, #32
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d01c      	beq.n	8008fd0 <USART6_IRQHandler+0x54>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_RX_FLAG_BIT_POS;
 8008f96:	4b27      	ldr	r3, [pc, #156]	; (8009034 <USART6_IRQHandler+0xb8>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	4b26      	ldr	r3, [pc, #152]	; (8009038 <USART6_IRQHandler+0xbc>)
 8008f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	4b23      	ldr	r3, [pc, #140]	; (8009034 <USART6_IRQHandler+0xb8>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4b23      	ldr	r3, [pc, #140]	; (8009038 <USART6_IRQHandler+0xbc>)
 8008fac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fb0:	f022 0220 	bic.w	r2, r2, #32
 8008fb4:	601a      	str	r2, [r3, #0]
		// Read the received data
		rx_buffer = (uint8_t)(USART_Array[USART_source]->USART_DR & 0xFF);
 8008fb6:	4b1f      	ldr	r3, [pc, #124]	; (8009034 <USART6_IRQHandler+0xb8>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	4b1e      	ldr	r3, [pc, #120]	; (8009038 <USART6_IRQHandler+0xbc>)
 8008fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	4b1d      	ldr	r3, [pc, #116]	; (800903c <USART6_IRQHandler+0xc0>)
 8008fc8:	701a      	strb	r2, [r3, #0]
		rx_ready = 1;  // Indicate that a byte has been received
 8008fca:	4b1d      	ldr	r3, [pc, #116]	; (8009040 <USART6_IRQHandler+0xc4>)
 8008fcc:	2201      	movs	r2, #1
 8008fce:	701a      	strb	r2, [r3, #0]
	}

	// Check if the TXE flag is set
	if (USART_Array[USART_source]->USART_SR & USART_TX_FLAG_BIT_POS)
 8008fd0:	4b18      	ldr	r3, [pc, #96]	; (8009034 <USART6_IRQHandler+0xb8>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	4b18      	ldr	r3, [pc, #96]	; (8009038 <USART6_IRQHandler+0xbc>)
 8008fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d021      	beq.n	800902a <USART6_IRQHandler+0xae>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_TX_FLAG_BIT_POS;
 8008fe6:	4b13      	ldr	r3, [pc, #76]	; (8009034 <USART6_IRQHandler+0xb8>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	4b12      	ldr	r3, [pc, #72]	; (8009038 <USART6_IRQHandler+0xbc>)
 8008fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <USART6_IRQHandler+0xb8>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <USART6_IRQHandler+0xbc>)
 8008ffc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009004:	601a      	str	r2, [r3, #0]
		// If there is data to transmit
		if (!tx_ready) {
 8009006:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <USART6_IRQHandler+0xc8>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10c      	bne.n	800902a <USART6_IRQHandler+0xae>
			USART_Array[USART_source]->USART_DR = tx_buffer;  // Send the byte
 8009010:	4b0d      	ldr	r3, [pc, #52]	; (8009048 <USART6_IRQHandler+0xcc>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	b2da      	uxtb	r2, r3
 8009016:	4b07      	ldr	r3, [pc, #28]	; (8009034 <USART6_IRQHandler+0xb8>)
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	4619      	mov	r1, r3
 800901c:	4b06      	ldr	r3, [pc, #24]	; (8009038 <USART6_IRQHandler+0xbc>)
 800901e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009022:	605a      	str	r2, [r3, #4]
			tx_ready = 1;  // Indicate that the transmission is complete
 8009024:	4b07      	ldr	r3, [pc, #28]	; (8009044 <USART6_IRQHandler+0xc8>)
 8009026:	2201      	movs	r2, #1
 8009028:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800902a:	bf00      	nop
 800902c:	46bd      	mov	sp, r7
 800902e:	bc80      	pop	{r7}
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	200000b9 	.word	0x200000b9
 8009038:	20000018 	.word	0x20000018
 800903c:	200000bb 	.word	0x200000bb
 8009040:	200000bc 	.word	0x200000bc
 8009044:	20000024 	.word	0x20000024
 8009048:	200000ba 	.word	0x200000ba

0800904c <main>:
						.tx_mode = POLLING ,.type =ASYNCHRONOUS ,.word_length = EGHIT_BITS,.stop_bits =ONE_STOP_BIT
};


int main(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8009052:	f000 f855 	bl	8009100 <SystemClock_Config>
	Systick_init();
 8009056:	f7ff f8eb 	bl	8008230 <Systick_init>
	RCC_GPIOA_CLK_ENABLE();
 800905a:	4b24      	ldr	r3, [pc, #144]	; (80090ec <main+0xa0>)
 800905c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905e:	4a23      	ldr	r2, [pc, #140]	; (80090ec <main+0xa0>)
 8009060:	f043 0301 	orr.w	r3, r3, #1
 8009064:	6313      	str	r3, [r2, #48]	; 0x30
	RCC_GPIOC_CLK_ENABLE();
 8009066:	4b21      	ldr	r3, [pc, #132]	; (80090ec <main+0xa0>)
 8009068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906a:	4a20      	ldr	r2, [pc, #128]	; (80090ec <main+0xa0>)
 800906c:	f043 0304 	orr.w	r3, r3, #4
 8009070:	6313      	str	r3, [r2, #48]	; 0x30
	RCC_GPIOB_CLK_ENABLE();
 8009072:	4b1e      	ldr	r3, [pc, #120]	; (80090ec <main+0xa0>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	4a1d      	ldr	r2, [pc, #116]	; (80090ec <main+0xa0>)
 8009078:	f043 0302 	orr.w	r3, r3, #2
 800907c:	6313      	str	r3, [r2, #48]	; 0x30
	RCC_SYSCFG_CLK_ENABLE();
 800907e:	4b1b      	ldr	r3, [pc, #108]	; (80090ec <main+0xa0>)
 8009080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009082:	4a1a      	ldr	r2, [pc, #104]	; (80090ec <main+0xa0>)
 8009084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009088:	6453      	str	r3, [r2, #68]	; 0x44
	scb_set_priority_group(GROUP_PRIORITIES_4_SUB_PRIORITIES_4);	  // preemption
 800908a:	4819      	ldr	r0, [pc, #100]	; (80090f0 <main+0xa4>)
 800908c:	f7ff f8a2 	bl	80081d4 <scb_set_priority_group>
	//cb_set_priority_group(GROUP_PRIORITIES_1_SUB_PRIORITIES_16);   // no preemption because 1 group
	GPIO_Pin_init(&PC13);
 8009090:	4818      	ldr	r0, [pc, #96]	; (80090f4 <main+0xa8>)
 8009092:	f7ff fc71 	bl	8008978 <GPIO_Pin_init>

	//lcd_4bit_clear(&lcd);

	//lcd_4bit_send_string(&lcd , "Eng : Hamada");

	GPIO_Pin_init(&UART2TX);
 8009096:	4818      	ldr	r0, [pc, #96]	; (80090f8 <main+0xac>)
 8009098:	f7ff fc6e 	bl	8008978 <GPIO_Pin_init>
	GPIO_Pin_init(&UART2RX);
 800909c:	4817      	ldr	r0, [pc, #92]	; (80090fc <main+0xb0>)
 800909e:	f7ff fc6b 	bl	8008978 <GPIO_Pin_init>
	//USART_init(&uart2);

	DotMatrix_init();
 80090a2:	f7ff f92f 	bl	8008304 <DotMatrix_init>
//		//lcd_4bit_send_string_pos(&lcd ,ROW2,COL1, "Thanks Eng:Amgad");
//
//		//delay_ms(1000);
//		lcd_4bit_clear(&lcd);
		//delay_ms(200);
		GPIO_Toggle_Pin_Value(PORTC, PIN13);
 80090a6:	210d      	movs	r1, #13
 80090a8:	2002      	movs	r0, #2
 80090aa:	f7ff fdd1 	bl	8008c50 <GPIO_Toggle_Pin_Value>
		delay_ms(200);
 80090ae:	20c8      	movs	r0, #200	; 0xc8
 80090b0:	f7ff f910 	bl	80082d4 <delay_ms>

		//USART_send_byte_blocking(&uart2, 0x51);


		for(uint8_t i = 1 ; i <= 8 ; i++)
 80090b4:	2301      	movs	r3, #1
 80090b6:	71fb      	strb	r3, [r7, #7]
 80090b8:	e014      	b.n	80090e4 <main+0x98>
		{
			DotMatrix_Set_Led_Val(i,1,DOT_MATRIX_LED_ON);delay_ms(25);DotMatrix_Set_Led_Val(i,1,DOT_MATRIX_LED_OFF);delay_ms(25);
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	2201      	movs	r2, #1
 80090be:	2101      	movs	r1, #1
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7ff f98f 	bl	80083e4 <DotMatrix_Set_Led_Val>
 80090c6:	2019      	movs	r0, #25
 80090c8:	f7ff f904 	bl	80082d4 <delay_ms>
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2200      	movs	r2, #0
 80090d0:	2101      	movs	r1, #1
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7ff f986 	bl	80083e4 <DotMatrix_Set_Led_Val>
 80090d8:	2019      	movs	r0, #25
 80090da:	f7ff f8fb 	bl	80082d4 <delay_ms>
		for(uint8_t i = 1 ; i <= 8 ; i++)
 80090de:	79fb      	ldrb	r3, [r7, #7]
 80090e0:	3301      	adds	r3, #1
 80090e2:	71fb      	strb	r3, [r7, #7]
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	2b08      	cmp	r3, #8
 80090e8:	d9e7      	bls.n	80090ba <main+0x6e>
		GPIO_Toggle_Pin_Value(PORTC, PIN13);
 80090ea:	e7dc      	b.n	80090a6 <main+0x5a>
 80090ec:	40023800 	.word	0x40023800
 80090f0:	05fa0500 	.word	0x05fa0500
 80090f4:	20000028 	.word	0x20000028
 80090f8:	20000038 	.word	0x20000038
 80090fc:	20000030 	.word	0x20000030

08009100 <SystemClock_Config>:

}


Std_RetType_t SystemClock_Config(void)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	; 0x28
 8009104:	af00      	add	r7, sp, #0
	Std_RetType_t ret = RET_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	RCC_OscInitTypedef RCC_OscInitStruct ={0};
 800910c:	f107 0310 	add.w	r3, r7, #16
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	605a      	str	r2, [r3, #4]
 8009116:	609a      	str	r2, [r3, #8]
 8009118:	60da      	str	r2, [r3, #12]
 800911a:	611a      	str	r2, [r3, #16]
	RCC_ClkInitTypedef RCC_ClkInitStruct ={0};
 800911c:	1d3b      	adds	r3, r7, #4
 800911e:	2200      	movs	r2, #0
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	605a      	str	r2, [r3, #4]
 8009124:	609a      	str	r2, [r3, #8]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009126:	2301      	movs	r3, #1
 8009128:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.HSE_State = RCC_HSE_ON;
 800912a:	2301      	movs	r3, #1
 800912c:	617b      	str	r3, [r7, #20]
	ret = HALL_RCC_OscConfig(&RCC_OscInitStruct);
 800912e:	f107 0310 	add.w	r3, r7, #16
 8009132:	4618      	mov	r0, r3
 8009134:	f7ff fdc2 	bl	8008cbc <HALL_RCC_OscConfig>
 8009138:	4603      	mov	r3, r0
 800913a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	RCC_ClkInitStruct.AHBClkDivider  =RCC_SYSCLK_AHB_DIV1;
 800913e:	2300      	movs	r3, #0
 8009140:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.APB1ClkDivider =RCC_HCLK_APB1_DIV1;
 8009142:	2300      	movs	r3, #0
 8009144:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB2ClkDivider =RCC_HCLK_APB2_DIV1;
 8009146:	2300      	movs	r3, #0
 8009148:	60fb      	str	r3, [r7, #12]
	ret = HALL_RCC_ClockConfig(&RCC_ClkInitStruct);
 800914a:	1d3b      	adds	r3, r7, #4
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff fe15 	bl	8008d7c <HALL_RCC_ClockConfig>
 8009152:	4603      	mov	r3, r0
 8009154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return ret;
 8009158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800915c:	4618      	mov	r0, r3
 800915e:	3728      	adds	r7, #40	; 0x28
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009164:	480d      	ldr	r0, [pc, #52]	; (800919c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009166:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009168:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800916c:	480c      	ldr	r0, [pc, #48]	; (80091a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800916e:	490d      	ldr	r1, [pc, #52]	; (80091a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009170:	4a0d      	ldr	r2, [pc, #52]	; (80091a8 <LoopForever+0xe>)
  movs r3, #0
 8009172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009174:	e002      	b.n	800917c <LoopCopyDataInit>

08009176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800917a:	3304      	adds	r3, #4

0800917c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800917c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800917e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009180:	d3f9      	bcc.n	8009176 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009182:	4a0a      	ldr	r2, [pc, #40]	; (80091ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8009184:	4c0a      	ldr	r4, [pc, #40]	; (80091b0 <LoopForever+0x16>)
  movs r3, #0
 8009186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009188:	e001      	b.n	800918e <LoopFillZerobss>

0800918a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800918a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800918c:	3204      	adds	r2, #4

0800918e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800918e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009190:	d3fb      	bcc.n	800918a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009192:	f000 f811 	bl	80091b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009196:	f7ff ff59 	bl	800904c <main>

0800919a <LoopForever>:

LoopForever:
  b LoopForever
 800919a:	e7fe      	b.n	800919a <LoopForever>
  ldr   r0, =_estack
 800919c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80091a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091a4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80091a8:	08009230 	.word	0x08009230
  ldr r2, =_sbss
 80091ac:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80091b0:	200000c0 	.word	0x200000c0

080091b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80091b4:	e7fe      	b.n	80091b4 <ADC_IRQHandler>
	...

080091b8 <__libc_init_array>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	4d0d      	ldr	r5, [pc, #52]	; (80091f0 <__libc_init_array+0x38>)
 80091bc:	4c0d      	ldr	r4, [pc, #52]	; (80091f4 <__libc_init_array+0x3c>)
 80091be:	1b64      	subs	r4, r4, r5
 80091c0:	10a4      	asrs	r4, r4, #2
 80091c2:	2600      	movs	r6, #0
 80091c4:	42a6      	cmp	r6, r4
 80091c6:	d109      	bne.n	80091dc <__libc_init_array+0x24>
 80091c8:	4d0b      	ldr	r5, [pc, #44]	; (80091f8 <__libc_init_array+0x40>)
 80091ca:	4c0c      	ldr	r4, [pc, #48]	; (80091fc <__libc_init_array+0x44>)
 80091cc:	f000 f818 	bl	8009200 <_init>
 80091d0:	1b64      	subs	r4, r4, r5
 80091d2:	10a4      	asrs	r4, r4, #2
 80091d4:	2600      	movs	r6, #0
 80091d6:	42a6      	cmp	r6, r4
 80091d8:	d105      	bne.n	80091e6 <__libc_init_array+0x2e>
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e0:	4798      	blx	r3
 80091e2:	3601      	adds	r6, #1
 80091e4:	e7ee      	b.n	80091c4 <__libc_init_array+0xc>
 80091e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ea:	4798      	blx	r3
 80091ec:	3601      	adds	r6, #1
 80091ee:	e7f2      	b.n	80091d6 <__libc_init_array+0x1e>
 80091f0:	08009228 	.word	0x08009228
 80091f4:	08009228 	.word	0x08009228
 80091f8:	08009228 	.word	0x08009228
 80091fc:	0800922c 	.word	0x0800922c

08009200 <_init>:
 8009200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009202:	bf00      	nop
 8009204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009206:	bc08      	pop	{r3}
 8009208:	469e      	mov	lr, r3
 800920a:	4770      	bx	lr

0800920c <_fini>:
 800920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920e:	bf00      	nop
 8009210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009212:	bc08      	pop	{r3}
 8009214:	469e      	mov	lr, r3
 8009216:	4770      	bx	lr
